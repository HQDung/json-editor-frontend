{"version":3,"sources":["reducers/App.js","reducers/index.js","actions/action-type.js","configs/index.js","utils/common.js","components/code-view.js","components/content-editable.js","components/tree-view-child-node.js","components/boolean-view.js","components/tree-view.js","containers/App/index.js","actions/app.js","serviceWorker.js","index.js","Store.js"],"names":["INITIAL_STATE","data","combineReducers","app","state","action","type","DEV","process","SERVER_URL","isPrimitive","value","isArray","Array","React","memo","renderArray","array","Fragment","map","idx","key","renderPrimitiveValue","processData","length","toString","object","Object","keys","item","onChange","valueType","className","onBlur","e","innerText","target","emittedValue","parseFloat","parentElement","getAttribute","contentEditable","dangerouslySetInnerHTML","__html","placeholder","keyName","children","useState","parentKey","setParentKey","elmRef","useRef","useEffect","getParentKey","current","ref","data-key","checked","onSubmit","toggle","event","contentNestedSelector","querySelector","classList","clickable","name","isNodeClickable","onClick","App","jsonStr","setJsonStr","errorMsgHidden","setErrorMsgHidden","saveDataMsgHidden","setSaveDataMsgHidden","view","setView","jsonObj","setJsonObj","dispatch","useDispatch","appState","useSelector","setTimeout","validateJsonStr","string","JSON","parse","toggleView","viewType","rows","trim","newObj","newValue","path","stack","split","shift","updateObject","stringify","axios","post","configs","then","res","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35308e06.chunk.js","sourcesContent":["import {\r\n    SUBMIT_DATA_SUCCESS,\r\n} from '../actions/action-type';\r\n\r\nconst INITIAL_STATE = {\r\n    data: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case SUBMIT_DATA_SUCCESS:\r\n            return { ...state, data: action.data }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\nimport AppReducer from './App';\r\n\r\nexport default combineReducers({\r\n   app: AppReducer\r\n});","export const SUBMIT_DATA_REQUEST = 'SUBMIT_DATA_REQUEST';\nexport const SUBMIT_DATA_SUCCESS = 'SUBMIT_DATA_SUCCESS';\nexport const SUBMIT_DATA_FAILED = 'SUBMIT_DATA_FAILED';\n","const devMode = process.env.NODE_ENV === 'development';\n\nexport default {\n  DEV: devMode,\n  SERVER_URL: devMode\n    ? 'http://localhost:5000/api'\n    : '/api/',\n};","export const isPrimitive = (value) => {\n  return typeof (value) === 'string'\n    || typeof (value) === 'number'\n    || typeof (value) === 'boolean'\n}\n\nexport const isArray = (value) => Array.isArray(value)","import React from 'react';\nimport { isPrimitive, isArray } from '../utils/common';\n\nconst CodeView = ({ data }) => {\n\n  const renderArray = (array) => <React.Fragment>\n    <span>[</span>\n    <ul>\n      {array.map((value, idx) =>\n        <li key={idx}>\n          {isPrimitive(value) ? renderPrimitiveValue(value) :\n            isArray(value) ? renderArray(value) : processData(value)}\n          {idx !== array.length - 1 ? ',' : ''}\n        </li>\n      )}\n    </ul>\n    <span>]</span>\n  </React.Fragment>\n\n  const renderPrimitiveValue = (value) => {\n    const type = typeof value;\n    switch (type) {\n      case 'boolean':\n        return value.toString();\n      case 'string':\n        return `\"${value.toString()}\"`;\n      default:\n        return value;\n    }\n  }\n\n  const processData = (object) => {\n    return object === null ? 'null' : <React.Fragment>\n      <span>{`{`}</span>\n      <ul>\n        {Object.keys(object).map((item, idx) => {\n          return <li key={`${idx}_${item}`}>\"{item}\":&nbsp;\n          {isPrimitive(object[item]) ? renderPrimitiveValue(object[item]) :\n              isArray(object[item]) ? renderArray(object[item]) : processData(object[item])\n            }\n            {idx !== Object.keys(object).length - 1 ? ',' : ''}\n          </li>\n        })}\n      </ul>\n      <span>{`}`}</span>\n    </React.Fragment>\n  }\n\n  return <div>\n    {processData(data)}\n  </div>\n};\n\nexport default React.memo(CodeView);","import React from 'react';\n\nconst ContentEditable = ({ value, onChange }) => {\n\n  const valueType = typeof (value);\n\n  const emitChange = (e) => {\n    const { innerText } = e.target;\n    const emittedValue = valueType === 'number' ? parseFloat(innerText) : innerText;\n    onChange(e.target.parentElement.getAttribute('data-key'), emittedValue);\n  }\n\n  return <span\n    className=\"editable\"\n    onBlur={emitChange}\n    contentEditable\n    dangerouslySetInnerHTML={{ __html: value }}\n    placeholder=\"null\" />\n\n};\n\nexport default React.memo(ContentEditable);","import React, { useRef, useState, useEffect } from 'react';\n\nconst TreeViewChildNode = ({ keyName, children }) => {\n  const [parentKey, setParentKey] = useState('');\n  const elmRef = useRef();\n\n  useEffect(() => {\n    setParentKey(getParentKey());\n  }, []);\n\n  const getParentKey = () => elmRef.current.parentElement.parentElement.getAttribute('data-key');\n\n  const getElmKey = () => {\n    if(parentKey) return `${parentKey}.${keyName}`;\n    return keyName;\n  }\n\n  return <div\n    ref={elmRef}\n    className=\"child\"\n    data-key={getElmKey()}>\n    {children}\n  </div>\n}\n\nexport default React.memo(TreeViewChildNode);","import React from 'react';\n\nconst BooleanView = ({ value, onChange }) => {\n\n  const emitChange = (e) => {\n    onChange(e.target.parentElement.parentElement.getAttribute('data-key'), e.target.checked);\n  }\n\n  return <span>\n    <input type=\"checkbox\" checked={value} onChange={emitChange}/>\n    {value.toString()}\n  </span>\n};\n\nexport default React.memo(BooleanView);","import React from 'react';\nimport { isPrimitive, isArray } from '../utils/common';\nimport ContentEditable from './content-editable';\nimport TreeViewChildNode from './tree-view-child-node';\nimport BooleanView from './boolean-view';\n\nconst TreeView = ({ data, onChange, onSubmit }) => {\n\n  const renderArray = (array) => <React.Fragment>\n    <span>[{array.length}]</span>\n    <div className=\"nested\">\n      {array.map((value, idx) =>\n        <TreeViewChildNode key={idx} keyName={idx}>\n          <span className=\"array-idx\">{idx}</span>:&nbsp;\n          {isPrimitive(value) ? renderPrimitiveValue(idx, value) :\n            isArray(value) ? renderArray(value) : processData(value)}\n        </TreeViewChildNode>\n      )}\n    </div>\n  </React.Fragment>\n\n  const renderPrimitiveValue = (key, value) => {\n    const type = typeof (value);\n    switch (type) {\n      case 'boolean':\n        return <BooleanView value={value} onChange={onChange} />;\n      default:\n        return <ContentEditable value={value} onChange={onChange} />;\n    }\n  }\n\n  const toggle = (event) => {\n    const contentNestedSelector = event.target.parentElement.querySelector(\".nested\");\n    if (contentNestedSelector) contentNestedSelector.classList.toggle(\"hidden\");\n    event.target.classList.toggle(\"collapsed\");\n  }\n\n  const renderNode = (clickable, name) => <React.Fragment>\n    <span className={clickable ? \"node\" : \"\"} onClick={toggle}>{name}</span>:&nbsp;\n    </React.Fragment>;\n\n  const processData = (object) => {\n    return <React.Fragment>\n      <span>Object{`{${Object.keys(object).length}}`}</span>\n      <div className=\"nested\">\n        {Object.keys(object).map((key, idx) => {\n          const value = object[key];\n          const isNodeClickable = !isPrimitive(value) && value !== null;\n          return <TreeViewChildNode\n            key={`${idx}_${key}`}\n            keyName={key}>\n            {renderNode(isNodeClickable, key)}\n            {!isNodeClickable ? renderPrimitiveValue(key, value) :\n              isArray(value) ? renderArray(value) : processData(value)\n            }\n          </TreeViewChildNode>\n        })}\n      </div>\n    </React.Fragment>\n  }\n\n  return <div>\n    {processData(data)}\n    <button className=\"submit-btn\" onClick={onSubmit}>Save</button>\n  </div>\n};\n\nexport default React.memo(TreeView);","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { submitData } from '../../actions/app';\r\nimport CodeView from '../../components/code-view';\r\nimport TreeView from '../../components/tree-view';\r\n\r\nimport './style.scss';\r\n\r\nfunction App() {\r\n  const [jsonStr, setJsonStr] = useState('');\r\n  const [errorMsgHidden, setErrorMsgHidden] = useState(true);\r\n  const [saveDataMsgHidden, setSaveDataMsgHidden] = useState(true);\r\n  const [view, setView] = useState('code');\r\n  const [jsonObj, setJsonObj] = useState();\r\n  const dispatch = useDispatch();\r\n  const appState = useSelector(state => state.app);\r\n\r\n  useEffect(() => {\r\n    if(appState.data){\r\n      setSaveDataMsgHidden(false);\r\n      setTimeout(() => setSaveDataMsgHidden(true), 1000)\r\n    }\r\n  }, [appState])\r\n\r\n  const onChangeJsonStr = e => {\r\n    const string = e.target.value.trim();\r\n    setJsonStr(string);\r\n    setErrorMsgHidden(validateJsonStr(string));\r\n  }\r\n\r\n  const validateJsonStr = string => {\r\n    try {\r\n      const object = JSON.parse(string);\r\n      setJsonObj(object);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const toggleView = (viewType) => setView(viewType);\r\n\r\n  const updateObject = (object, newValue, path) => {\r\n    let stack = path.split('.');\r\n    while (stack.length > 1) {\r\n      object = object[stack.shift()];\r\n    }\r\n    object[stack.shift()] = newValue;\r\n  }\r\n\r\n  const handleDataChange = (key, value) => {\r\n    let newObj = { ...jsonObj };\r\n    updateObject(newObj, value, key);\r\n    setJsonObj(newObj);\r\n    setJsonStr(JSON.stringify(newObj));\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(submitData(jsonObj))\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <textarea\r\n        placeholder=\"Enter json string...\"\r\n        rows={10}\r\n        onChange={onChangeJsonStr}\r\n        value={jsonStr}></textarea>\r\n      {!errorMsgHidden && <p className=\"error\">Incorrect Json format</p>}\r\n      {jsonObj && errorMsgHidden && <div>\r\n        <div className=\"buttons\">\r\n          <button onClick={() => toggleView(\"code\")} className={`button ${view === 'code' && 'selected'}`}>Code</button>\r\n          <button onClick={() => toggleView(\"tree\")} className={`button ${view === 'tree' && 'selected'}`}>Tree</button>\r\n        </div>\r\n        {view === 'code' && <CodeView data={jsonObj} />}\r\n        {view === 'tree' && <TreeView data={jsonObj} onChange={handleDataChange} onSubmit={handleSubmit} />}\r\n        {!saveDataMsgHidden && <p className=\"success\">Data saved</p>}\r\n      </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import axios from 'axios';\r\nimport configs from '../configs';\r\nimport {\r\n  SUBMIT_DATA_REQUEST,\r\n  SUBMIT_DATA_SUCCESS,\r\n  SUBMIT_DATA_FAILED,\r\n} from './action-type';\r\n\r\nexport const submitData = data => dispatch => {\r\n  dispatch({ type: SUBMIT_DATA_REQUEST });\r\n  axios\r\n    .post(`${configs.SERVER_URL}/data`, data)\r\n    .then(res => {\r\n      return dispatch({\r\n        type: SUBMIT_DATA_SUCCESS,\r\n        data: res.data\r\n      });\r\n    })\r\n    .catch(error => {\r\n      return dispatch({ type: SUBMIT_DATA_FAILED, error });\r\n    });\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport configureStore from './Store';\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nexport default function configureStore() {\r\n return createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}